---
title: "R Coding Exercise"
author: Erick Mollinedo
date: 01-25-2024
---

The following space lists all the packages I used for this exercise:

```{r}
library(dslabs)
library(tidyverse)
```

I explored the `gapminder` dataset from the `dslabs` package using the `help()` function to pull out the help page that describes the dataset

```{r}
help("gapminder")
```

I explored the structure of the dataset using the `str()` function, the summary using the `summary()` function and used the `class()` function to check the type of object for this dataset.

```{r}
str(gapminder)
summary(gapminder)
class(gapminder)
```

First, I created the object `africadata`, which includes only observations from Africa. And then I checked the structure and summary of the new object using `str()` and `summary()`

```{r}
#I used the 'filter()' function to select only the observations from Africa, using the variable 'continent'
africadata <- gapminder %>% filter(continent == "Africa")

#Check if the new object was correctly saved using the 'str()' and 'summary()' functions
str(africadata)
summary(africadata)
```

Here, I created two new objects. `africachild` contains only the variables `infant_mortality` and `life_expectancy`, meanwhile `africapop` contains the `population` and `life_expectancy` variables. To do this I used the `select()` function. And then I explored the structure and summary of both new objects using `str()` and `summary()` to check if the objects were correctly created.

```{r}
#Creating new objects, using the 'select()' function to choose only the variables I need from the original dataset
africachild <- africadata %>% select(c(infant_mortality, life_expectancy))
africapop <- africadata %>% select(c(population, life_expectancy))

#Using 'str()' to check the structure of the new objects
str(africachild)
str(africapop)

#Using 'summary()' to check the summary of the new objects
summary(africachild)
summary(africapop)
```

Now, I created a graph that illustrates `life expectancy` as a function of `child mortality` using `ggplot()`, with the `africachild` object.

```{r}
#Plotting life expenctancy as a function of infant mortality, using the 'ggplot()' package, in this case I used a point geometry using 'geom_point()'
ggplot(data= africachild, aes(x= infant_mortality, y= life_expectancy))+
  geom_point()
```

It is observed that there is a negative correlation between infant mortality and life expectancy.

And here, I created a graph that shows `life expectancy` as a function of `population` using `ggplot()`, with the `africapop` object.

```{r}
#I used the 'geom_point()' geometry to plot the data points and set the x-axis to log scale using 'scale_x_log10()'.
ggplot(data= africapop ,aes(x= population, y= life_expectancy))+
  geom_point()+
  scale_x_log10()
```

There is a positive correlation between life expectancy and population size, however there can be observed some weird 'streaks'. If looking at the original dataset, this includes the population size from 1960 to 2016, so there are actually many years of observations instead of just one.

I noticed there are years with missing data (NAs). To figure out which years have missing data I used the `is.na()` function in combination with `filter()`.

```{r}
#Use `filter(is.na(infant_mortality)) to filter all observation that have missing values (NAs). Then I used 'count(year)', to summarize which years have the selected missing data.
africadata %>% filter(is.na(infant_mortality)) %>% count(year)
```

There is missing info on infant mortality from the years 1960 to 1981 and 2016. So it was best to choose a specific year for the analysis. Here, I created a new object `africa2000` with only data from the year 2000. Then I checked the new data frame using `str()` and `summary()`

```{r}
#Create the object 'africa2000' using the 'filter()' function on the variable 'year' to select only the observations from the year 2000.
africa2000 <- africadata %>% filter(year == 2000)

#Check the new object using 'str()' and 'summary()'
str(africa2000)
summary(africa2000)
```

And here I made a new plot for `life expectancy` as a function of `infant mortality` for the year 2000 only.

```{r}
ggplot(data= africa2000 ,aes(x= infant_mortality, y= life_expectancy))+
  geom_point()
```

And another plot of `life expectancy` as a function of `population` for the year 2000 only.

```{r}
ggplot(data= africa2000 ,aes(x= population, y= life_expectancy))+
  geom_point()+
  scale_x_log10()
```

It is observed a negative association between infant mortality and life expectancy, however, the association between life expectancy and population is not clear. To do additional modeling, I tried to fit a linear model using the `lm()` function on the `africa2000` dataset. I used `life expectancy` as the outcome and `infant mortality` as a predictor in the `fit1` model, and `life_expectancy` also as outcome and `population` as the predictor in the `fit2` model.

```{r}
fit1 <- lm(life_expectancy ~ infant_mortality, data = africa2000)
fit2 <- lm(life_expectancy ~ population, data = africa2000)
```

And finally I used the `summary()` function to look at the fit results for both models.

```{r}
summary(fit1)
summary(fit2)
```

Based on the `fit1` model, it is observed that infant mortality is statistically associated to life expectancy (p<0.001). It seems that life expectancy decreases as infant mortality increases. However, it appears there is no association between life expectancy and population size, according to the `fit2` model, given p= 0.616, so there could be a different model that explains this association.


## This section is contributed by *Kelly Cao*
### Loading and Checking Data
```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```
The following section shows that the data set `us_contagious_diseases` has 6 potential variables to analyze: disease (name), state, year, weeks_reporting, count (number of cases), and population. The 6 variables are reported for the following contagious diseases: Hepatitis A, Measles, Mumps, Pertussis, Polio, Rubella, and Smallpox for the US states. 

```{r}
#Installing and loading needed packages with the command install.packages() and the library() function
library("dslabs")
library(renv)
library(tidyverse)

#The help() function is used to look at data provided in 'us_contagious_diseases'
help(us_contagious_diseases)

#Check the summary, class, and structure of the data set 'us_contagious_diseases'
str(us_contagious_diseases)
summary(us_contagious_diseases)
class(us_contagious_diseases)
```

### Processing and Cleaning Data
I chose to use the  `count`, `weeks_reporting`, and `disease` columns to process and clean. After processing, the `disease_count` object was created to represent the columns of `count` and `disease`. No further filtering was performed on that object. Another object, `Weeks_Count`, is used to represent `count` and `weeks_reporting`. In addition to the `select()` function used to select the two columns, the `filter()` function was used to remove any rows that had `weeks_reporting`= 0, as that suggest no reporting was done for those selected data points. After that was excluded, 288 observations were left in the `Weeks_Count` object.
```{r}
#An object is created that includes only data from the state of Georgia using the pipe operator and the filter() function.
Georgia_data <-
  us_contagious_diseases %>%
  filter(state == 'Georgia')

#The str() and summary() function is used to verify that the object was made correctly
str(Georgia_data)
summary(Georgia_data)

#Another object is created with 'weeks_reporting' and 'count'. This will group the total number of reported cases with the number of weeks counts were reported for that year. The rows that had  0 in "weeks_reporting" were excluded with the filter() function.
Weeks_Count <- 
  select(Georgia_data, weeks_reporting, count) %>%
  filter(weeks_reporting !=0)

#The str() and summary() function is used to verify that the object was made correctly
str(Weeks_Count)
summary(Weeks_Count)

#Another object is created with 'disease' and 'count', which would group the disease type with the total number of reported cases in Georgia into one object. 
disease_count<- select(Georgia_data, count, disease)

#The str() and summary() function is used to verify that the object was made correctly
str(disease_count)
summary(disease_count)
```

### Plots
I plotted the `Weeks_Count` object as a scatter plot, with the total number of reported cases being plotted as a function of the number of weeks reported in the state of Georgia. When fully plotted with a line of best fit, visually, there appears to be a positive correlation between the number of reported case and the number of weeks that the counts were reported, which makes logical sense. The total number of cases reported will increase when the time that is used to collect the reported response increase. 
```{r}
#Using the package ggplot2 (which is found in tidyverse) to create a scatter plot using the variables in the object 'Weeks_Count' and assigning it to the variable 'p1

p1 <- ggplot(Weeks_Count, aes(x = weeks_reporting, y = log(count))) +geom_point()+ geom_smooth(method = "lm")+
      ggtitle('Number of Weeks Reporting vs the Number of Reported Case')+
      theme(plot.title= element_text(hjust=0.5))+
      xlab('Number of Weeks Reporting')+
      ylab('Total Number of Reported Cases (log-scaled)')+
      labs(caption = "Figure 1: The total number of reported cases plotted as a function of the number of weeks reported in the state of Georgia")+
      theme(plot.caption = element_text(hjust=0, face="bold"))

#The theme() function was a great way to manipulate the specific element in the plot, whether it was color, size, or orientation of the text or visuals.

#Using the plot() function to determine if the plot was properly created
plot(p1)
```

Similar to `P1`, I initially plotted `disease_count` as a bar graph to visualize the number of reported cases per disease type. This is shown in `p2`. Upon initial observation of the graph, it is clear that compared to the other disease listed, `Measles` easily acted as an outlier in the data set with the greatest number of reported case by far. This is followed by `Pertussis` and `Hepatitis A`. 

```{R}
#Repeating the previous two steps to plot 'disease_count' in 'p2'
p2 <- ggplot(disease_count, aes(x = disease, y = count)) + geom_bar(stat = "identity", position = "dodge", fill = "skyblue")+
      ggtitle('The Type of Disease vs The Number of Reported Case')+
      theme(plot.title= element_text(hjust=0.5))+
      xlab('Disease Type')+
      ylab('Total Number of Reported Cases')+
      labs(caption = "Figure 2: The total number of reported cases plotted as a function of the disease type reported in the state of Georgia")+
      theme(plot.caption = element_text(hjust=0, face="bold"))

#print the plot
plot(p2)
```

As I was unable to discern any valuable information for the disease `Smallpox` or `Rubella` due to the scaling, I replotted the graph as a violin plot overlayed with plot points to better visualize the spread of the data over the different disease while accounting for the outlier that caused the scaling issue. I plotted this as `p2_2`.The violin plot showed the data distribution and the density of each variable. The individual data points overlaps it for more visual clarity. 
```{R}
#When looking at the previous plot, there is a distinct outlier for the Measles category, thus making it difficult to determine the value that's provided from the other disease. To combat that, another plot was created to improve the clarity of the visualization of the same data set.
p2_2 <- ggplot(disease_count, aes(x = disease, y = log(count))) + 
      geom_violin(fill = "lightblue", color = "blue", alpha = 0.7) +
      geom_jitter(width = 0.2, color = "red", alpha = 0.7) + 
      ggtitle('The Type of Disease vs The Number of Reported Case')+
      theme(plot.title= element_text(hjust=0.5))+
      xlab('Disease Type')+
      ylab('Total Number of Reported Cases (log-scaled)')+
      labs(caption = "Figure 3: The total number of reported cases plotted as a function of the disease type reported in the state of Georgia")+
      theme(plot.caption = element_text(hjust=0, face="bold"))

#print the plot
plot(p2_2)

```
#### Additional plot for fun
Looking at `Figure 4`, one can see that aside from `Polio` all of the other diseases listed show a upward positive trend. This suggests that `Polio` have little change case reported despite the time elapse, which aligns with historical and public vaccination efforts. Looking at `Measles`, it showed the greatest positive slope, showing the greatest growth in number of case over some set of time, which corroborates what is shown in `Figure 2`.
```{r}
#Replotting p1 with clearly assigned data point to disease variable. Compared to p1, I added color and a legend to the points to distinguish which data point represent which disease type. 
p4 <- ggplot(Georgia_data, aes(x = weeks_reporting, y = log(count), color = disease, label = disease)) +geom_point()+ geom_smooth(method = "lm")+
      ggtitle('Number of Weeks Reporting vs the Number of Reported Case')+
      theme(plot.title= element_text(hjust=0.5))+
      xlab('Number of Weeks Reporting')+
      ylab('Total Number of Reported Cases (log-scaled)')+
      labs(caption = "Figure 4: The total number of reported cases plotted as a function of the number of weeks reported in the state of Georgia")+
      theme(plot.caption = element_text(hjust=0, face="bold"))+
      labs(color = "Disease Type")

#The theme() function was a great way to manipulate the specific element in the plot, whether it was color, size, or orientation of the text or visuals.

#Using the plot() function to determine if the plot was properly created
plot(p4)
```

### Analysis and Conclusion
I then fitted both objects to a linear model, with `count` as thte outcome for both models and `weeks_reporting` and `disease` as the predictor respectively.

Based on the results of the linear model analysis, both models seem fairly reliable with `lmfit2` having the edge. 

The second model has a higher R-squared, suggesting that it explains a larger proportion of variance in the response variable. The F-statistic is greater in this model, indicating a better overall fit. 

The low p-value for `lmfit1` suggests that `weeks_reporting` may have some significance in predicting the outcome `count`. The same is especially true for the second model. 

The `lmfit2` model also had a lower residual standard error compared to `lmfit1`, further suggesting that the second model's prediction are closer to the actual value on average. 

Based on the following observation, `lmfit2` appears to perform as the better model, with a more significant predictor, a higher proportion of explained variance, a higher F-statistic, and a lower residual standard error. 

```{r}
#Fitting the data set to a linear model with 'count' as the outcome and 'weekly_reporting' as the predictor
lmfit1 <- lm(count ~ weeks_reporting, Weeks_Count)

#Use the summary() command to check over the fit 
summary(lmfit1)

#Fitting the data set to a linear model with 'count' as the outcome and 'disease' as the predictor
lmfit2 <- lm(count ~ disease, disease_count)

#Use the summary() command to check over the fit 
summary(lmfit2)
```
